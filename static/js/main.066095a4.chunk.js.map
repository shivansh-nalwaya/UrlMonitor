{"version":3,"sources":["store/Urls.js","App.js","serviceWorker.js","index.js"],"names":["URL_SESSION","Urls","Object","classCallCheck","this","extendObservable","data","getAll","_this","fetch","then","res","json","url","_this2","method","headers","Content-Type","body","JSON","stringify","refresh","setInterval","getOne","_id","singleData","updatedData","map","obj","result","sync_status","clearInterval","id","_this3","concat","item","index","Panel","Collapse","Header","props","react_default","a","createElement","row_default","type","justify","style","marginRight","col_default","icon_default","spin","color","button_default","marginLeft","onClick","UrlStore","deleteData","shape","icon","App","possibleConstructorReturn","getPrototypeOf","call","state","Fragment","paddingTop","form_default","layout","Item","input_default","placeholder","value","onChange","setState","target","addData","collapse_default","width","marginTop","accordion","header","App_Header","key","react_chartkick_esm","convert","responses","Component","observer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.066095a4.chunk.js","sourcesContent":["import { extendObservable } from \"mobx\";\n\nclass Urls {\n  constructor() {\n    extendObservable(this, {\n      data: []\n    });\n    this.getAll();\n  }\n\n  getAll() {\n    fetch(\"https://url-monitor-app.herokuapp.com/api\")\n      .then(res => res.json())\n      .then(res => {\n        this.data = res.data;\n      });\n  }\n\n  addData(url) {\n    fetch(\"https://url-monitor-app.herokuapp.com/api\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ url })\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.getAll();\n        let refresh = setInterval(() => {\n          this.getOne(res._id).then(singleData => {\n            let updatedData = this.data.map(obj => {\n              return singleData.result._id === obj._id\n                ? singleData.result\n                : obj;\n            });\n            this.data = updatedData;\n            if (singleData.result.sync_status) clearInterval(refresh);\n          });\n        }, 1000);\n      });\n  }\n\n  deleteData(id) {\n    fetch(`https://url-monitor-app.herokuapp.com/api/${id}`, {\n      method: \"DELETE\"\n    }).then(() => {\n      this.getAll();\n    });\n  }\n\n  getOne(id) {\n    return fetch(`https://url-monitor-app.herokuapp.com/api/${id}`).then(res =>\n      res.json()\n    );\n  }\n\n  convert(data) {\n    let res = {};\n    data.map((item, index) => {\n      res[index + 1] = item;\n      return index;\n    });\n    return res;\n  }\n}\n\nconst URL_SESSION = new Urls();\nexport default URL_SESSION;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Input,\n  Form,\n  Row,\n  Col,\n  Collapse,\n  Icon\n} from \"./components/design\";\nimport { LineChart } from \"react-chartkick\";\nimport UrlStore from \"./store/Urls\";\nimport { observer } from \"mobx-react\";\nconst Panel = Collapse.Panel;\n\nconst Header = props => {\n  return (\n    <Row type=\"flex\" justify=\"space-between\" style={{ marginRight: \"1em\" }}>\n      <Col>{props.item.url}</Col>\n      <Col>\n        <Icon\n          type={props.item.sync_status ? \"check\" : \"sync\"}\n          spin={!props.item.sync_status}\n          style={\n            props.item.sync_status ? { color: \"green\" } : { color: \"grey\" }\n          }\n        />\n        <Button\n          style={{ marginLeft: \"1em\" }}\n          onClick={() => {\n            UrlStore.deleteData(props.item._id);\n          }}\n          type=\"danger\"\n          shape=\"circle\"\n          icon=\"delete\"\n        />\n      </Col>\n    </Row>\n  );\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Row type=\"flex\" justify=\"space-around\" style={{ paddingTop: \"1em\" }}>\n          <Col>\n            <h1>Url Monitor</h1>\n          </Col>\n          <Col>\n            <Form layout=\"inline\">\n              <Form.Item>\n                <Input\n                  placeholder=\"URL\"\n                  value={this.state.url}\n                  onChange={url => this.setState({ url: url.target.value })}\n                />\n              </Form.Item>\n              <Form.Item>\n                <Button\n                  type=\"primary\"\n                  onClick={() => {\n                    UrlStore.addData(this.state.url);\n                    this.setState({ url: \"\" });\n                  }}\n                >\n                  Add\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n        <Row type=\"flex\" justify=\"center\">\n          <Collapse style={{ width: \"75%\", marginTop: \"1em\" }} accordion>\n            {UrlStore.data.map(item => (\n              <Panel header={<Header item={item} />} key={item._id}>\n                <LineChart data={UrlStore.convert(item.responses)} />\n              </Panel>\n            ))}\n          </Collapse>\n        </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}